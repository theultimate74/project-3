 main.py
python
Copy
Edit
from modules import web_scanner, port_scanner, subdomain_enum, dir_bruteforce, banner_grabber

def main():
    print("=== Python Penetration Testing Toolkit ===\n")
    print("1. Web Vulnerability Scanner")
    print("2. Port Scanner")
    print("3. Subdomain Enumerator")
    print("4. Directory Brute Forcer")
    print("5. Banner Grabber")
    print("0. Exit\n")

    choice = input("Select a module to run: ").strip()

    if choice == "0":
        print("Exiting...")
        return

    target = input("Enter target URL/IP: ").strip()

    if choice == "1":
        web_scanner.scan(target)
    elif choice == "2":
        port_scanner.scan_ports(target)
    elif choice == "3":
        subdomain_enum.enumerate(target)
    elif choice == "4":
        dir_bruteforce.brute_force(target)
    elif choice == "5":
        banner_grabber.grab_banner(target)
    else:
        print(" Invalid choice.")

if __name__ == "__main__":
    main()
 modules/__init__.py
python
Copy
Edit
# Empty file to treat modules as a package
 modules/web_scanner.py
pyhon
Copy
Edit
import requests
from bs4 import BeautifulSoup

def scan(url):
    print(f"\n[+] Scanning {url} for web vulnerabilities...\n")

    # Reflected XSS Test
    payload = "<script>alert('x')</script>"
    try:
        response = requests.get(url + "?q=" + payload, timeout=5)
        if payload in response.text:
            print("‚ö†  Potential XSS vulnerability detected!")
        else:
            print(" No XSS detected.")
    except:
        print(" XSS test failed.")

    # Clickjacking
    try:
        headers = requests.get(url, timeout=5).headers
        if 'X-Frame-Options' not in headers:
            print("‚ö†  Clickjacking protection is missing!")
        else:
            print("Clickjacking protection is present.")
    except:
        print(" Clickjacking test failed.")

    # Security headers
    try:
        headers = requests.get(url, timeout=5).headers
        missing = [h for h in ["Content-Security-Policy", "Strict-Transport-Security", "X-XSS-Protection"] if h not in headers]
        if missing:
            print("‚ö†  Missing security headers:", ', '.join(missing))
        else:
            print(" All essential security headers are present.")
    except:
        print(" Header check failed.")
 modules/port_scanner.py
python
Copy
Edit
import socket

def scan_ports(host):
    print(f"\n[+] Scanning ports on {host}...\n")
    common_ports = [21, 22, 23, 25, 53, 80, 110, 139, 443, 445, 3306, 8080]
    for port in common_ports:
        try:
            sock = socket.socket()
            sock.settimeout(0.5)
            result = sock.connect_ex((host, port))
            if result == 0:
                print(f" Port {port} is OPEN")
            sock.close()
        except Exception:
            continue
 modules/subdomain_enum.py
python
Copy
Edit
import requests

def enumerate(domain):
    print(f"\n[+] Enumerating subdomains for {domain}...\n")
    try:
        with open("wordlists/common.txt") as f:
            for line in f:
                sub = line.strip() + "." + domain
                try:
                    res = requests.get("http://" + sub, timeout=2)
                    print(f" Found subdomain: {sub}")
                except:
                    pass
    except FileNotFoundError:
        print(" wordlists/common.txt not found.")
 modules/dir_bruteforce.py
python
Copy
Edit
import requests

def brute_force(url):
    print(f"\n[+] Brute-forcing directories on {url}...\n")
    try:
        with open("wordlists/common.txt") as f:
            for line in f:
                word = line.strip()
                full_url = url.rstrip("/") + "/" + word
                try:
                    r = requests.get(full_url, timeout=2)
                    if r.status_code == 200:
                        print(f"üìÅ Found: {full_url}")
                except:
                    pass
    except FileNotFoundError:
        print(" wordlists/common.txt not found.")
 modules/banner_grabber.py
python
Copy
Edit
import socket

def grab_banner(ip, port=80):
    print(f"\n[+] Grabbing banner from {ip}:{port}...\n")
    try:
        s = socket.socket()
        s.settimeout(2)
        s.connect((ip, port))
        s.send(b"HEAD / HTTP/1.0\r\n\r\n")
        banner = s.recv(1024)
        print(" Banner:\n", banner.decode(errors="ignore"))
        s.close()
    except Exception as e:
        print(" Banner grab failed:", e)
wordlists/common.txt
txt
Copy
Edit
admin
login
test
uploads
dashboard
images
api
js
css
data
files
 requirements.txt
txt
Copy
Edit
requests
beautifulsoup4
